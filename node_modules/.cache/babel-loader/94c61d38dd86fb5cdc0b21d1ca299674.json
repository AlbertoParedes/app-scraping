{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar debug = require('debug')('xml-parser');\n/**\n * Expose `parse`.\n */\n\n\nmodule.exports = parse;\n/**\n * Parse the given string of `xml`.\n *\n * @param {String} xml\n * @param {Object} [options]\n *  @config {Boolean} [trim=true]\n *  @config {Boolean} [stripComments=true]\n * @return {Object}\n * @api public\n */\n\nfunction parse(xml, options) {\n  // trim content\n  if (!options || options.trim) {\n    xml = xml.trim();\n  } // strip comments\n\n\n  if (!options || options.stripComments) {\n    xml = xml.replace(/<!--[\\s\\S]*?-->/g, '');\n  }\n\n  return document();\n  /**\n   * XML document.\n   */\n\n  function document() {\n    var decl = declaration();\n    var child;\n    var children = [];\n    var documentRootNode;\n\n    while (child = nextRootChild()) {\n      if (child.name !== '#comment') {\n        if (documentRootNode) {\n          throw new Error('Found multiple root nodes');\n        }\n\n        documentRootNode = child;\n      }\n\n      children.push(child);\n    }\n\n    return {\n      declaration: decl,\n      root: documentRootNode,\n      children: children\n    };\n  }\n  /**\n   * Declaration.\n   */\n\n\n  function declaration() {\n    var m = match(/^<\\?xml\\s*/);\n    if (!m) return; // tag\n\n    var node = {\n      attributes: {}\n    }; // attributes\n\n    while (!(eos() || is('?>'))) {\n      var attr = attribute();\n      if (!attr) return node;\n      node.attributes[attr.name] = attr.value;\n    }\n\n    match(/\\?>\\s*/);\n    return node;\n  }\n  /**\n   * Tag.\n   */\n\n\n  function tag() {\n    debug('tag %j', xml);\n    var m = match(/^<([\\w-:.]+)\\s*/);\n    if (!m) return; // name\n\n    var node = {\n      name: m[1],\n      attributes: {},\n      children: []\n    }; // attributes\n\n    while (!(eos() || is('>') || is('?>') || is('/>'))) {\n      var attr = attribute();\n      if (!attr) return node;\n      node.attributes[attr.name] = attr.value;\n    } // self closing tag\n\n\n    if (match(/^\\s*\\/>/)) {\n      node.children = null;\n      return node;\n    }\n\n    match(/\\??>/); // children\n\n    var child;\n\n    while (child = nextChild()) {\n      node.children.push(child);\n    } // closing\n\n\n    match(/^<\\/[\\w-:.]+>/);\n    return node;\n  }\n\n  function nextChild() {\n    return tag() || content() || comment();\n  }\n\n  function nextRootChild() {\n    return tag() || comment();\n  }\n\n  function comment() {\n    var m = match(/^<!--[\\s\\S]*?-->/);\n\n    if (m) {\n      return {\n        name: '#comment',\n        content: m[0]\n      };\n    }\n  }\n  /**\n   * Text content.\n   */\n\n\n  function content() {\n    debug('content %j', xml);\n    var m = match(/^([^<]+)/);\n\n    if (m) {\n      return {\n        name: '#text',\n        content: m[1]\n      };\n    }\n  }\n  /**\n   * Attribute.\n   */\n\n\n  function attribute() {\n    debug('attribute %j', xml);\n    var m = match(/([\\w:-]+)\\s*=\\s*(\"[^\"]*\"|'[^']*'|\\w+)\\s*/);\n    if (!m) return;\n    return {\n      name: m[1],\n      value: strip(m[2])\n    };\n  }\n  /**\n   * Strip quotes from `val`.\n   */\n\n\n  function strip(val) {\n    return val.replace(/^['\"]|['\"]$/g, '');\n  }\n  /**\n   * Match `re` and advance the string.\n   */\n\n\n  function match(re) {\n    var m = xml.match(re);\n    if (!m) return;\n    xml = xml.slice(m[0].length);\n    return m;\n  }\n  /**\n   * End-of-source.\n   */\n\n\n  function eos() {\n    return 0 == xml.length;\n  }\n  /**\n   * Check for `prefix`.\n   */\n\n\n  function is(prefix) {\n    return 0 == xml.indexOf(prefix);\n  }\n}","map":null,"metadata":{},"sourceType":"script"}